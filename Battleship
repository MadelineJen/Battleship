/* 
Madeline Jen
Anela Takiguci
Ana Luciano
Battleship Game Project
*/
import java.util.List;
import java.util.ArrayList;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Graphics2D;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseEvent;

public class Battleship {
    public static void main (String[] args){
        JFrame frame = new JFrame("Battleship Game");

        RectangleCanvas canvas = new RectangleCanvas();
        frame.add(canvas);
        frame.setSize(900, 1000); //please choose a size for the frame
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}
class RectangleCanvas extends JPanel implements MouseListener, MouseMotionListener {
    private Color RectColor = Color.MAGENTA;
    private ArrayList<Rectangle> rectangles = new ArrayList<>();
    private Rectangle currentDraggedRectanglw = null;
    private int otherX, otherY;
    private int clickCount = 0;

    public RectangleCanvas() {
        setBackground(Color.BLUE);
        addMouseListener(this);
        addMouseMotionListener(this);
        setFocusable(true);
    }

    public void mouseClicked(MouseEvent e) {
        if (clickCount < 4) {
            int x = e.getX();
            int y = e.getY();
            int width = (clickCount + 1) * 10;
            int height = 10;
            Rectangle newRect = new Rectangle(x, y, width, height);
            rectangles.add(newRect);
            clickCount++;
            repaint();
        }
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Rectangle rect : rectangles) {
            g.setColor(RectColor);
            g.fillRect(rect.x, rect.y, rect.width, rect.height);
        }
    }

    public void mousePressed(MouseEvent e) {
        int x = e.getX();
        int y = e.getY();

        for (Rectangle rect : rectangles) {
            if (rect.contains(x, y)) {
                currentDraggedRectangle = rect;
                otherX = x - rect.x;
                otherY = y - rect.y;
                break;
            }
        }
    }

    public void mouseReleased(MouseEvent e) {
        currentDraggedRectangle = null;
    }

    public void mouseDragged(MouseEvent e) {
        if (currentDraggedRectangle != null) {
            int x = e.getX();
            int y = e.getY();
            currentDraggedRectangle.setLocation(x - otherX, y - otherY);
            repaint();
        }
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    public void mouseMoved(MouseEvent e) {
    }
}
