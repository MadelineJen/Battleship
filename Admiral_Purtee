//Import
import java.util.List;
import java.util.Random;
import java.util.ArrayList;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;


//Class
public class Admiral_Purtee {


	//Instance variables
	int rows = 10;
	int columns = 10;
	int startRX = 100; //x coordinate of startColX
	int startCY = 100; //y cooridnate of startRowY
	int cellSize = 50;
	
	//Finding first place
	int startPlacex = startRX + (cellSize / 2);
	int startPlacey = startCY + (cellSize/2);
	
	
	//variables 
	int rowGuess;
	int columnGuess;
	
	
	
	//Create arraylist
	//ArrayList<ArrayList<Integer>> gridPoints = new ArrayList<ArrayList<Integer>>();
	ArrayList<ArrayList<ArrayList<Integer>>> gridPoints = new ArrayList<ArrayList<ArrayList<Integer>>>();
	ArrayList<ArrayList<Integer>> computerPoints = new ArrayList<ArrayList<Integer>>();
	
	ArrayList<ArrayList<Integer>> checkOverlap = new ArrayList<ArrayList<Integer>>();

	
	//Constructions w/ parameters
	Admiral_Purtee(int rows, int columns, int startRX, int startCY, int cellSize){
		this.rows = rows;
		this.columns = columns;
		this.startRX = startRX;
		this.startCY = startCY;
		this.cellSize = cellSize;
		this.gridPoints = gridPoints;
		
		
		
	}
	
	//Method for calculating out 
	public void points() {
		//Calculate out the points of grid
		for (int i=0; i< (rows); i++) {
			
			//Add array 
			ArrayList<ArrayList<Integer>> rowEach = new ArrayList<ArrayList<Integer>>();
			gridPoints.add(rowEach);
			
			//For every row, y coordinate changes
			//startPlacey = startPlacey + cellSize*i;
			int newStarty = startPlacey + cellSize*i;
			
			//Go through columns
			for(int j=0; j<(columns); j++) {
				
				//Add arraylist 
				ArrayList<Integer> coordinatesEach = new ArrayList<Integer>();
				gridPoints.get(i).add(j, coordinatesEach);
				
				
				//For every column, x coordinate changes
				//startPlacex = startPlacex + cellSize*j;
				int newStartx = startPlacex + cellSize*j;

				
				//Add to array 
				gridPoints.get(i).get(j).add(0, newStartx);
				gridPoints.get(i).get(j).add(1, newStarty);

				
				
			}	
		}
		
		// Using calculated out grid poitns, randomize and reate your ships 
		for (int ab=1; ab<5; ab++) {
			
			// Continue for how many ship length 
			int countLoop = ab;
			
			// choose random and horizontal or vertical 
			//Create instance of Random class
			Random rand = new Random();
			
			int hORv = rand.nextInt(2);
			
			
			//If zero, horizontal 
			if (hORv == 0) {
				System.out.println("Horizontal happening: "+ab);

				//While loop to make sure no overlap 
				boolean check = false;
				
				while (check == false) {
										
					boolean overlapped = false;
					
					System.out.println("got new value "+overlapped);


					//find which rows
					int rowGuess2 = rand.nextInt(rows);
					
					//find which column to start with 
					int columnGuess2 = rand.nextInt(columns-(ab-1));
					
					// add the two values to arraylist (first point ship)
					if (checkOverlap.isEmpty() == true) {
						System.out.println("Happened, okay");
						rowGuess = rowGuess2;
						columnGuess = columnGuess2; 
						ArrayList<Integer> placePoit = new ArrayList<Integer>();
						placePoit.add(rowGuess2);
						placePoit.add(columnGuess2);
						checkOverlap.add(placePoit);
						break;
					}
					
					else {
						
						int shipLength = ab;
						
						while (shipLength > 0) {
							shipLength = shipLength - 1;
							
							//if overlapped, continue on 
							if (overlapped==true) {
								break;
							}
							
							for (ArrayList<Integer> ints : checkOverlap) {
								System.out.println("HWOEIRJWELR");
								
								if (ints.get(0) == rowGuess2 && ints.get(1)== columnGuess2+shipLength) {
									System.out.println("Happened");
									overlapped = true;
									break;
									
								}
							}
						}
						
						
						//If overlapped, continue to get new value
						if (overlapped==true) {
							System.out.println("Continued properly");
							continue;
						}
						
						
						else {
							//if not overlaped, add to list 
							System.out.println("Continued on");
							ArrayList<Integer> placePoit = new ArrayList<Integer>();
							rowGuess = rowGuess2;
							columnGuess = columnGuess2; 
							placePoit.add(rowGuess);
							placePoit.add(columnGuess);
							break;
							
						}
					}
				}
				
				
				//Continue for how many ship length 
				while (countLoop > 0) {
					
					//Change how many you need to add
					countLoop = countLoop - 1;
					
					//Get that placement 
					ArrayList<Integer> addingPoint = gridPoints.get(rowGuess).get(columnGuess+countLoop);
					computerPoints.add(addingPoint);	
					
				}
			}
			
			//If one, vertical 
			if (hORv == 1) {
				System.out.println("Vertical happening: "+ab);
				
				//find which rows
				int rowGuess = rand.nextInt(rows-(ab-1));
				
				//find which column to start with 
				int columnGuess = rand.nextInt(columns);
				
				//Continue for how many ship length 
				while (countLoop > 0) {
					
					//Change how many you need to add
					countLoop = countLoop - 1;
					
					//Get that placement 
					ArrayList<Integer> addingPoint = gridPoints.get(rowGuess+countLoop).get(columnGuess);
					computerPoints.add(addingPoint);	
					
				}
			}
			
			
		}
		
		System.out.println(gridPoints);
		System.out.println(computerPoints);


	}
	
	public static void main(String[] args) {
		Admiral_Purtee a = new Admiral_Purtee(10,10,100,100,50);
		a.points();
	  }
	

}
